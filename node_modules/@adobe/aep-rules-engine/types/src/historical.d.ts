import { SupportedMatcher } from "./types/enums";
import { Context } from "./types/engine";
import { HistoricalEvent } from "./types/schema";
export declare function checkForHistoricalMatcher(eventCount: number, matcherKey: SupportedMatcher, value: number): boolean;
/**
 * This function is used to query and count any event
 * @param events
 * @param context
 * @param from
 * @param to
 * @returns countTotal
 */
export declare function queryAndCountAnyEvent(events: Array<HistoricalEvent>, context: Context, from?: any, to?: any): number;
/**
 * Iterates through the events in the query.
 * If the event doesn't exist or has no count, return 0.
 * If the event is in the right order, update the previousEventTimestamp.
 * If the event is not in the right order, return 0
 * If all events are in the right order, return 1
 * @param events
 * @param context
 * @param from
 * @param to
 * @returns {number}
 */
export declare function queryAndCountOrderedEvent(events: Array<HistoricalEvent>, context: Context, from?: any, to?: any): 0 | 1;
